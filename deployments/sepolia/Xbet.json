{
  "address": "0x21BaFf38Ac40c4BA06a294F31a4003aD22fe9aE4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cordinator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_keyhash",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "_subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "_callbackGasLimit",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Xbet__LessThanMinAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Xbet__TransactionFaill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Xbet__XbetIsClosed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastCall",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "state",
          "type": "uint256"
        }
      ],
      "name": "Xbet__noNeedForUpKeeper",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "AddressEntered",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "EnterTime",
          "type": "uint256"
        }
      ],
      "name": "Enter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "pickedWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestedId",
          "type": "uint256"
        }
      ],
      "name": "requestedWinner",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "entryGame",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEnterAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSubId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getXbetState",
      "outputs": [
        {
          "internalType": "enum Xbet.XbetState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x19416910bbdd440d0532723adf15294efb7e1169d91ffa2e11c8e7ad48f37951",
  "receipt": {
    "to": null,
    "from": "0xFF870b79877d1e7f5b01148F49C799E988c4F48C",
    "contractAddress": "0x21BaFf38Ac40c4BA06a294F31a4003aD22fe9aE4",
    "transactionIndex": 8,
    "gasUsed": "1242184",
    "logsBloom": "0x
    "blockHash": "0x689b01e5c6fe7d0d2f0e93850195c6d2f94f02638a29a92216dd22b50356db7e",
    "transactionHash": "0x19416910bbdd440d0532723adf15294efb7e1169d91ffa2e11c8e7ad48f37951",
    "logs": [],
    "blockNumber": 3140436,
    "cumulativeGasUsed": "1455400",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8103B0A8A00be2DDC778e6e7eaa21791Cd364625",
    "10000000000000000",
    "0x474e34a077df58807dbe9c96d3c009b23b3c6d0cce433e59bbf5b34f823bc56c",
    "627",
    "500000"
  ],
  "numDeployments": 1,
  "solcInputHash": "7fed2174f51115ab099b90f070c44dcc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cordinator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_keyhash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"_callbackGasLimit\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Xbet__LessThanMinAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Xbet__TransactionFaill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Xbet__XbetIsClosed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastCall\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"state\",\"type\":\"uint256\"}],\"name\":\"Xbet__noNeedForUpKeeper\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"AddressEntered\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"EnterTime\",\"type\":\"uint256\"}],\"name\":\"Enter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"pickedWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestedId\",\"type\":\"uint256\"}],\"name\":\"requestedWinner\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entryGame\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEnterAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSubId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getXbetState\",\"outputs\":[{\"internalType\":\"enum Xbet.XbetState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"here we gonna override the function checkUpKeep from the interface automation, this function call a nother function (in our case it call the check winner function)if the condution that we add to it being confirmed 1-check if the Xbet is open 2-call it after spicified time 3- there is at least 2 players and also we need to fund our subscription with link cause this function take some link tokens while it's excute off-chain\"},\"performUpkeep(bytes)\":{\"details\":\"this function will call the function requestRandomWords() that returns a random word (number)requestRandomWords function takes some args and we will set this args as a variables statethis call of requestRandomWords will make a transaction from our subscription account\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/0xbet.sol\":\"Xbet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"contracts/0xbet.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\n// this is a chainlink contract for automation the call of a function (that pick the winner)\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\\\";\\n\\n// declare errors:\\nerror Xbet__noNeedForUpKeeper(uint balance, uint lastCall, uint state);\\nerror Xbet__LessThanMinAmount();\\nerror Xbet__TransactionFaill();\\nerror Xbet__XbetIsClosed();\\n\\ncontract Xbet is VRFConsumerBaseV2, AutomationCompatibleInterface {\\n    /*events*/\\n    event Enter(address indexed AddressEntered, uint EnterTime);\\n    event requestedWinner(uint requestedId);\\n    event pickedWinner(address indexed winner);\\n\\n    /* enum is a new type of data that you can use to spicify somethings than call them by index of (enumName.parm)*/\\n    enum XbetState {\\n        OPEN,\\n        CLOSE\\n    }\\n\\n    VRFCoordinatorV2Interface private immutable i_COORDINATOR;\\n    uint private immutable enterAmount;\\n    address payable[] private players;\\n    XbetState private state;\\n    uint private recentTime;\\n\\n    // the winner:\\n    address payable private recentWinner;\\n\\n    // the requestRandomWords() argements:\\n    bytes32 private immutable keyhash;\\n    uint64 private subscriptionId;\\n    uint16 private constant requesVtConfirmations = 3;\\n    uint32 private immutable callbackGasLimit;\\n    uint32 private constant numWords = 1;\\n\\n    // in the constructor we need to pass the address of the contract that will gives us the random namber as\\n    // a param for our constructor , and the VRF contract also take an args constructor is that address\\n    constructor(\\n        address cordinator,\\n        uint minAmount,\\n        bytes32 _keyhash,\\n        uint64 _subscriptionId,\\n        uint32 _callbackGasLimit\\n    ) VRFConsumerBaseV2(cordinator) {\\n        enterAmount = minAmount;\\n        i_COORDINATOR = VRFCoordinatorV2Interface(cordinator);\\n        keyhash = _keyhash;\\n        subscriptionId = _subscriptionId;\\n        callbackGasLimit = _callbackGasLimit;\\n        state = XbetState.OPEN; // we can use the syntax XbetState(0) and it gonna be the same\\n        recentTime = block.timestamp;\\n    }\\n\\n    // function to inter to the game\\n    function entryGame() public payable {\\n        if (msg.value < enterAmount) {\\n            revert Xbet__LessThanMinAmount();\\n        }\\n        if (state != XbetState(0)) {\\n            revert Xbet__XbetIsClosed();\\n        }\\n        players.push(payable(msg.sender));\\n        emit Enter(msg.sender, block.timestamp);\\n    }\\n\\n    /**\\n     * @dev here we gonna override the function checkUpKeep from the interface automation, this function call a\\n     * nother function (in our case it call the check winner function)if the condution that we add to it being confirmed\\n     * 1-check if the Xbet is open\\n     * 2-call it after spicified time\\n     * 3- there is at least 2 players\\n     * and also we need to fund our subscription with link cause this function take some link tokens while it's\\n     * excute off-chain\\n     */\\n    function checkUpkeep(\\n        bytes memory /* checkData */\\n    )\\n        public\\n        view\\n        override\\n        returns (bool upkeepNeeded, bytes memory /* performData */)\\n    {\\n        bool isOpen = (state == XbetState.OPEN);\\n        bool timePassed = block.timestamp - recentTime > 10;\\n        bool enoughPlayers = players.length > 0;\\n        bool haveBalance = (address(this).balance > 0);\\n        upkeepNeeded = (isOpen && timePassed && enoughPlayers && haveBalance);\\n    }\\n\\n    /** @dev this function will call the function requestRandomWords() that returns a random word (number)\\n     * @dev requestRandomWords function takes some args and we will set this args as a variables state\\n     * @dev this call of requestRandomWords will make a transaction from our subscription account\\n     */\\n    function performUpkeep(bytes calldata /*performData*/) external override {\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\n        if (!upkeepNeeded) {\\n            revert Xbet__noNeedForUpKeeper(\\n                address(this).balance,\\n                recentTime,\\n                uint(state)\\n            );\\n        }\\n        uint requestId = i_COORDINATOR.requestRandomWords(\\n            keyhash,\\n            subscriptionId,\\n            requesVtConfirmations,\\n            callbackGasLimit,\\n            numWords\\n        );\\n        state = XbetState.CLOSE;\\n        emit requestedWinner(requestId);\\n    }\\n\\n    /** @dev this function takes 2 params , but we just need one that return the array that returns the random\\n     * words ,\\n     * @dev than we will use the modulo method to pick the index of the winner in the array players;\\n     * @dev than we send the fund from contract to the winner , and fire an event that return the address of\\n     * the winner in this game\\n     */\\n    function fulfillRandomWords(\\n        uint /*requestId*/,\\n        uint256[] memory randomWords\\n    ) internal override {\\n        uint winnerId = randomWords[0] % players.length;\\n        address payable winner = players[winnerId];\\n        recentWinner = winner;\\n        // we need to reset the players array :\\n        players = new address payable[](0);\\n        // send the funds to the winner\\n        (bool success, ) = recentWinner.call{value: address(this).balance}(\\\"\\\");\\n        if (!success) {\\n            revert Xbet__TransactionFaill();\\n        }\\n\\n        recentTime = block.timestamp;\\n        state = XbetState(0);\\n        emit pickedWinner(recentWinner);\\n    }\\n\\n    /* view functions*/\\n    // function to see the min amount to inter a game:\\n    function getEnterAmount() public view returns (uint) {\\n        return enterAmount;\\n    }\\n\\n    // function to get player:\\n    function getPlayer(uint index) public view returns (address) {\\n        return players[index];\\n    }\\n\\n    // function to get the recent winner of the lottery  :\\n    function getRecentWinner() public view returns (address) {\\n        return recentWinner;\\n    }\\n\\n    // state returns the index of the state in the enum ;\\n    function getXbetState() public view returns (XbetState) {\\n        return state;\\n    }\\n\\n    function getNumWords() public pure returns (uint) {\\n        return numWords;\\n    }\\n\\n    function getNumberOfPlayers() public view returns (uint) {\\n        return players.length;\\n    }\\n\\n    function getLastTimestamp() public view returns (uint) {\\n        return recentTime;\\n    }\\n\\n    function getSubId() public view returns (uint) {\\n        return subscriptionId;\\n    }\\n\\n    function getBalance() public view returns (uint) {\\n        return address(this).balance;\\n    }\\n}\\n\",\"keccak256\":\"0x7d7a7e9037e3bcf437b2d4a1b82a626deaa0d3af36f6692e0a3f5a7975d8816f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101206040523480156200001257600080fd5b506040516200181e3803806200181e833981810160405281019062000038919062000296565b848073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508360c081815250508473ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508260e0818152505081600360146101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508063ffffffff166101008163ffffffff16815250506000600160006101000a81548160ff021916908360018111156200011957620001186200031e565b5b02179055504260028190555050505050506200034d565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001628262000135565b9050919050565b620001748162000155565b81146200018057600080fd5b50565b600081519050620001948162000169565b92915050565b6000819050919050565b620001af816200019a565b8114620001bb57600080fd5b50565b600081519050620001cf81620001a4565b92915050565b6000819050919050565b620001ea81620001d5565b8114620001f657600080fd5b50565b6000815190506200020a81620001df565b92915050565b600067ffffffffffffffff82169050919050565b6200022f8162000210565b81146200023b57600080fd5b50565b6000815190506200024f8162000224565b92915050565b600063ffffffff82169050919050565b620002708162000255565b81146200027c57600080fd5b50565b600081519050620002908162000265565b92915050565b600080600080600060a08688031215620002b557620002b462000130565b5b6000620002c58882890162000183565b9550506020620002d888828901620001be565b9450506040620002eb88828901620001f9565b9350506060620002fe888289016200023e565b925050608062000311888289016200027f565b9150509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c05160e0516101005161147e620003a060003960006104f0015260006104b60152600081816102fa01526105df0152600061047a015260008181610328015261037c015261147e6000f3fe6080604052600436106100c25760003560e01c8063473f1ddc1161007f578063d7e587ac11610059578063d7e587ac14610238578063e55ae4e814610263578063fbc6ba6f146102a0578063fd6673f5146102cb576100c2565b8063473f1ddc146101a457806353a2c19a146101cf5780636e04ff0d146101fa576100c2565b80630107447c146100c757806312065fe0146100f25780631fe543e31461011d57806337899770146101465780634585e33b14610171578063470e8f681461019a575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e99190610c08565b60405180910390f35b3480156100fe57600080fd5b5061010761031e565b6040516101149190610c08565b60405180910390f35b34801561012957600080fd5b50610144600480360381019061013f9190610dbc565b610326565b005b34801561015257600080fd5b5061015b6103e6565b6040516101689190610c08565b60405180910390f35b34801561017d57600080fd5b5061019860048036038101906101939190610e73565b6103f0565b005b6101a26105dd565b005b3480156101b057600080fd5b506101b9610769565b6040516101c69190610f01565b60405180910390f35b3480156101db57600080fd5b506101e4610793565b6040516101f19190610c08565b60405180910390f35b34801561020657600080fd5b50610221600480360381019061021c9190610fd1565b6107a2565b60405161022f9291906110b4565b60405180910390f35b34801561024457600080fd5b5061024d61082f565b60405161025a919061115b565b60405180910390f35b34801561026f57600080fd5b5061028a60048036038101906102859190611176565b610846565b6040516102979190610f01565b60405180910390f35b3480156102ac57600080fd5b506102b561088d565b6040516102c29190610c08565b60405180910390f35b3480156102d757600080fd5b506102e06108b5565b6040516102ed9190610c08565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b600047905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103d857337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103cf9291906111a3565b60405180910390fd5b6103e282826108c1565b5050565b6000600254905090565b600061040a604051806020016040528060008152506107a2565b509050806104765747600254600160009054906101000a900460ff166001811115610438576104376110e4565b5b6040517f4000a3c900000000000000000000000000000000000000000000000000000000815260040161046d939291906111cc565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f0000000000000000000000000000000000000000000000000000000000000000600360149054906101000a900467ffffffffffffffff1660037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b815260040161053195949392919061127b565b6020604051808303816000875af1158015610550573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057491906112e3565b905060018060006101000a81548160ff0219169083600181111561059b5761059a6110e4565b5b02179055507fba7ad5e9e41a8cd52695da840afaaab622480f86ddd7986ff0e70fefae600195816040516105cf9190610c08565b60405180910390a150505050565b7f0000000000000000000000000000000000000000000000000000000000000000341015610637576040517f6e092c4a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561064b5761064a6110e4565b5b600181111561065d5761065c6110e4565b5b600160009054906101000a900460ff16600181111561067f5761067e6110e4565b5b146106b6576040517f6e2accf400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f1fb48929215fc354244acea33112720ce5b7ba6912db70bb0149e77aa7c91ce14260405161075f9190610c08565b60405180910390a2565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b6000606060008060018111156107bb576107ba6110e4565b5b600160009054906101000a900460ff1660018111156107dd576107dc6110e4565b5b1490506000600a600254426107f2919061133f565b119050600080600080549050119050600080471190508380156108125750825b801561081b5750815b80156108245750805b955050505050915091565b6000600160009054906101000a900460ff16905090565b600080828154811061085b5761085a611373565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600360149054906101000a900467ffffffffffffffff1667ffffffffffffffff16905090565b60008080549050905090565b60008080549050826000815181106108dc576108db611373565b5b60200260200101516108ee91906113d1565b9050600080828154811061090557610904611373565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600067ffffffffffffffff81111561098e5761098d610c79565b5b6040519080825280602002602001820160405280156109bc5781602001602082028036833780820191505090505b50600090805190602001906109d2929190610b48565b506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1647604051610a1b90611433565b60006040518083038185875af1925050503d8060008114610a58576040519150601f19603f3d011682016040523d82523d6000602084013e610a5d565b606091505b5050905080610a98576040517f2fcf959c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b4260028190555060006001811115610ab357610ab26110e4565b5b600160006101000a81548160ff02191690836001811115610ad757610ad66110e4565b5b0217905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fdbc37d6d61c349260ba741b543972bfe4077fdd0f71c9b8f4a7452392167d17260405160405180910390a25050505050565b828054828255906000526020600020908101928215610bc1579160200282015b82811115610bc05782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b68565b5b509050610bce9190610bd2565b5090565b5b80821115610beb576000816000905550600101610bd3565b5090565b6000819050919050565b610c0281610bef565b82525050565b6000602082019050610c1d6000830184610bf9565b92915050565b6000604051905090565b600080fd5b600080fd5b610c4081610bef565b8114610c4b57600080fd5b50565b600081359050610c5d81610c37565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610cb182610c68565b810181811067ffffffffffffffff82111715610cd057610ccf610c79565b5b80604052505050565b6000610ce3610c23565b9050610cef8282610ca8565b919050565b600067ffffffffffffffff821115610d0f57610d0e610c79565b5b602082029050602081019050919050565b600080fd5b6000610d38610d3384610cf4565b610cd9565b90508083825260208201905060208402830185811115610d5b57610d5a610d20565b5b835b81811015610d845780610d708882610c4e565b845260208401935050602081019050610d5d565b5050509392505050565b600082601f830112610da357610da2610c63565b5b8135610db3848260208601610d25565b91505092915050565b60008060408385031215610dd357610dd2610c2d565b5b6000610de185828601610c4e565b925050602083013567ffffffffffffffff811115610e0257610e01610c32565b5b610e0e85828601610d8e565b9150509250929050565b600080fd5b60008083601f840112610e3357610e32610c63565b5b8235905067ffffffffffffffff811115610e5057610e4f610e18565b5b602083019150836001820283011115610e6c57610e6b610d20565b5b9250929050565b60008060208385031215610e8a57610e89610c2d565b5b600083013567ffffffffffffffff811115610ea857610ea7610c32565b5b610eb485828601610e1d565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610eeb82610ec0565b9050919050565b610efb81610ee0565b82525050565b6000602082019050610f166000830184610ef2565b92915050565b600080fd5b600067ffffffffffffffff821115610f3c57610f3b610c79565b5b610f4582610c68565b9050602081019050919050565b82818337600083830152505050565b6000610f74610f6f84610f21565b610cd9565b905082815260208101848484011115610f9057610f8f610f1c565b5b610f9b848285610f52565b509392505050565b600082601f830112610fb857610fb7610c63565b5b8135610fc8848260208601610f61565b91505092915050565b600060208284031215610fe757610fe6610c2d565b5b600082013567ffffffffffffffff81111561100557611004610c32565b5b61101184828501610fa3565b91505092915050565b60008115159050919050565b61102f8161101a565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561106f578082015181840152602081019050611054565b60008484015250505050565b600061108682611035565b6110908185611040565b93506110a0818560208601611051565b6110a981610c68565b840191505092915050565b60006040820190506110c96000830185611026565b81810360208301526110db818461107b565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110611124576111236110e4565b5b50565b600081905061113582611113565b919050565b600061114582611127565b9050919050565b6111558161113a565b82525050565b6000602082019050611170600083018461114c565b92915050565b60006020828403121561118c5761118b610c2d565b5b600061119a84828501610c4e565b91505092915050565b60006040820190506111b86000830185610ef2565b6111c56020830184610ef2565b9392505050565b60006060820190506111e16000830186610bf9565b6111ee6020830185610bf9565b6111fb6040830184610bf9565b949350505050565b6000819050919050565b61121681611203565b82525050565b600067ffffffffffffffff82169050919050565b6112398161121c565b82525050565b600061ffff82169050919050565b6112568161123f565b82525050565b600063ffffffff82169050919050565b6112758161125c565b82525050565b600060a082019050611290600083018861120d565b61129d6020830187611230565b6112aa604083018661124d565b6112b7606083018561126c565b6112c4608083018461126c565b9695505050505050565b6000815190506112dd81610c37565b92915050565b6000602082840312156112f9576112f8610c2d565b5b6000611307848285016112ce565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061134a82610bef565b915061135583610bef565b925082820390508181111561136d5761136c611310565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006113dc82610bef565b91506113e783610bef565b9250826113f7576113f66113a2565b5b828206905092915050565b600081905092915050565b50565b600061141d600083611402565b91506114288261140d565b600082019050919050565b600061143e82611410565b915081905091905056fea264697066735822122069dd1952a1a3888894b44462bbdf6785738ee1f325fd05521f16a3e48ee3541764736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106100c25760003560e01c8063473f1ddc1161007f578063d7e587ac11610059578063d7e587ac14610238578063e55ae4e814610263578063fbc6ba6f146102a0578063fd6673f5146102cb576100c2565b8063473f1ddc146101a457806353a2c19a146101cf5780636e04ff0d146101fa576100c2565b80630107447c146100c757806312065fe0146100f25780631fe543e31461011d57806337899770146101465780634585e33b14610171578063470e8f681461019a575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e99190610c08565b60405180910390f35b3480156100fe57600080fd5b5061010761031e565b6040516101149190610c08565b60405180910390f35b34801561012957600080fd5b50610144600480360381019061013f9190610dbc565b610326565b005b34801561015257600080fd5b5061015b6103e6565b6040516101689190610c08565b60405180910390f35b34801561017d57600080fd5b5061019860048036038101906101939190610e73565b6103f0565b005b6101a26105dd565b005b3480156101b057600080fd5b506101b9610769565b6040516101c69190610f01565b60405180910390f35b3480156101db57600080fd5b506101e4610793565b6040516101f19190610c08565b60405180910390f35b34801561020657600080fd5b50610221600480360381019061021c9190610fd1565b6107a2565b60405161022f9291906110b4565b60405180910390f35b34801561024457600080fd5b5061024d61082f565b60405161025a919061115b565b60405180910390f35b34801561026f57600080fd5b5061028a60048036038101906102859190611176565b610846565b6040516102979190610f01565b60405180910390f35b3480156102ac57600080fd5b506102b561088d565b6040516102c29190610c08565b60405180910390f35b3480156102d757600080fd5b506102e06108b5565b6040516102ed9190610c08565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b600047905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103d857337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103cf9291906111a3565b60405180910390fd5b6103e282826108c1565b5050565b6000600254905090565b600061040a604051806020016040528060008152506107a2565b509050806104765747600254600160009054906101000a900460ff166001811115610438576104376110e4565b5b6040517f4000a3c900000000000000000000000000000000000000000000000000000000815260040161046d939291906111cc565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f0000000000000000000000000000000000000000000000000000000000000000600360149054906101000a900467ffffffffffffffff1660037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b815260040161053195949392919061127b565b6020604051808303816000875af1158015610550573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057491906112e3565b905060018060006101000a81548160ff0219169083600181111561059b5761059a6110e4565b5b02179055507fba7ad5e9e41a8cd52695da840afaaab622480f86ddd7986ff0e70fefae600195816040516105cf9190610c08565b60405180910390a150505050565b7f0000000000000000000000000000000000000000000000000000000000000000341015610637576040517f6e092c4a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561064b5761064a6110e4565b5b600181111561065d5761065c6110e4565b5b600160009054906101000a900460ff16600181111561067f5761067e6110e4565b5b146106b6576040517f6e2accf400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f1fb48929215fc354244acea33112720ce5b7ba6912db70bb0149e77aa7c91ce14260405161075f9190610c08565b60405180910390a2565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b6000606060008060018111156107bb576107ba6110e4565b5b600160009054906101000a900460ff1660018111156107dd576107dc6110e4565b5b1490506000600a600254426107f2919061133f565b119050600080600080549050119050600080471190508380156108125750825b801561081b5750815b80156108245750805b955050505050915091565b6000600160009054906101000a900460ff16905090565b600080828154811061085b5761085a611373565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600360149054906101000a900467ffffffffffffffff1667ffffffffffffffff16905090565b60008080549050905090565b60008080549050826000815181106108dc576108db611373565b5b60200260200101516108ee91906113d1565b9050600080828154811061090557610904611373565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600067ffffffffffffffff81111561098e5761098d610c79565b5b6040519080825280602002602001820160405280156109bc5781602001602082028036833780820191505090505b50600090805190602001906109d2929190610b48565b506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1647604051610a1b90611433565b60006040518083038185875af1925050503d8060008114610a58576040519150601f19603f3d011682016040523d82523d6000602084013e610a5d565b606091505b5050905080610a98576040517f2fcf959c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b4260028190555060006001811115610ab357610ab26110e4565b5b600160006101000a81548160ff02191690836001811115610ad757610ad66110e4565b5b0217905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fdbc37d6d61c349260ba741b543972bfe4077fdd0f71c9b8f4a7452392167d17260405160405180910390a25050505050565b828054828255906000526020600020908101928215610bc1579160200282015b82811115610bc05782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b68565b5b509050610bce9190610bd2565b5090565b5b80821115610beb576000816000905550600101610bd3565b5090565b6000819050919050565b610c0281610bef565b82525050565b6000602082019050610c1d6000830184610bf9565b92915050565b6000604051905090565b600080fd5b600080fd5b610c4081610bef565b8114610c4b57600080fd5b50565b600081359050610c5d81610c37565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610cb182610c68565b810181811067ffffffffffffffff82111715610cd057610ccf610c79565b5b80604052505050565b6000610ce3610c23565b9050610cef8282610ca8565b919050565b600067ffffffffffffffff821115610d0f57610d0e610c79565b5b602082029050602081019050919050565b600080fd5b6000610d38610d3384610cf4565b610cd9565b90508083825260208201905060208402830185811115610d5b57610d5a610d20565b5b835b81811015610d845780610d708882610c4e565b845260208401935050602081019050610d5d565b5050509392505050565b600082601f830112610da357610da2610c63565b5b8135610db3848260208601610d25565b91505092915050565b60008060408385031215610dd357610dd2610c2d565b5b6000610de185828601610c4e565b925050602083013567ffffffffffffffff811115610e0257610e01610c32565b5b610e0e85828601610d8e565b9150509250929050565b600080fd5b60008083601f840112610e3357610e32610c63565b5b8235905067ffffffffffffffff811115610e5057610e4f610e18565b5b602083019150836001820283011115610e6c57610e6b610d20565b5b9250929050565b60008060208385031215610e8a57610e89610c2d565b5b600083013567ffffffffffffffff811115610ea857610ea7610c32565b5b610eb485828601610e1d565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610eeb82610ec0565b9050919050565b610efb81610ee0565b82525050565b6000602082019050610f166000830184610ef2565b92915050565b600080fd5b600067ffffffffffffffff821115610f3c57610f3b610c79565b5b610f4582610c68565b9050602081019050919050565b82818337600083830152505050565b6000610f74610f6f84610f21565b610cd9565b905082815260208101848484011115610f9057610f8f610f1c565b5b610f9b848285610f52565b509392505050565b600082601f830112610fb857610fb7610c63565b5b8135610fc8848260208601610f61565b91505092915050565b600060208284031215610fe757610fe6610c2d565b5b600082013567ffffffffffffffff81111561100557611004610c32565b5b61101184828501610fa3565b91505092915050565b60008115159050919050565b61102f8161101a565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561106f578082015181840152602081019050611054565b60008484015250505050565b600061108682611035565b6110908185611040565b93506110a0818560208601611051565b6110a981610c68565b840191505092915050565b60006040820190506110c96000830185611026565b81810360208301526110db818461107b565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110611124576111236110e4565b5b50565b600081905061113582611113565b919050565b600061114582611127565b9050919050565b6111558161113a565b82525050565b6000602082019050611170600083018461114c565b92915050565b60006020828403121561118c5761118b610c2d565b5b600061119a84828501610c4e565b91505092915050565b60006040820190506111b86000830185610ef2565b6111c56020830184610ef2565b9392505050565b60006060820190506111e16000830186610bf9565b6111ee6020830185610bf9565b6111fb6040830184610bf9565b949350505050565b6000819050919050565b61121681611203565b82525050565b600067ffffffffffffffff82169050919050565b6112398161121c565b82525050565b600061ffff82169050919050565b6112568161123f565b82525050565b600063ffffffff82169050919050565b6112758161125c565b82525050565b600060a082019050611290600083018861120d565b61129d6020830187611230565b6112aa604083018661124d565b6112b7606083018561126c565b6112c4608083018461126c565b9695505050505050565b6000815190506112dd81610c37565b92915050565b6000602082840312156112f9576112f8610c2d565b5b6000611307848285016112ce565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061134a82610bef565b915061135583610bef565b925082820390508181111561136d5761136c611310565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006113dc82610bef565b91506113e783610bef565b9250826113f7576113f66113a2565b5b828206905092915050565b600081905092915050565b50565b600061141d600083611402565b91506114288261140d565b600082019050919050565b600061143e82611410565b915081905091905056fea264697066735822122069dd1952a1a3888894b44462bbdf6785738ee1f325fd05521f16a3e48ee3541764736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "checkUpkeep(bytes)": {
        "details": "here we gonna override the function checkUpKeep from the interface automation, this function call a nother function (in our case it call the check winner function)if the condution that we add to it being confirmed 1-check if the Xbet is open 2-call it after spicified time 3- there is at least 2 players and also we need to fund our subscription with link cause this function take some link tokens while it's excute off-chain"
      },
      "performUpkeep(bytes)": {
        "details": "this function will call the function requestRandomWords() that returns a random word (number)requestRandomWords function takes some args and we will set this args as a variables statethis call of requestRandomWords will make a transaction from our subscription account"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1186,
        "contract": "contracts/0xbet.sol:Xbet",
        "label": "players",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 1189,
        "contract": "contracts/0xbet.sol:Xbet",
        "label": "state",
        "offset": 0,
        "slot": "1",
        "type": "t_enum(XbetState)1178"
      },
      {
        "astId": 1191,
        "contract": "contracts/0xbet.sol:Xbet",
        "label": "recentTime",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1193,
        "contract": "contracts/0xbet.sol:Xbet",
        "label": "recentWinner",
        "offset": 0,
        "slot": "3",
        "type": "t_address_payable"
      },
      {
        "astId": 1197,
        "contract": "contracts/0xbet.sol:Xbet",
        "label": "subscriptionId",
        "offset": 20,
        "slot": "3",
        "type": "t_uint64"
      }
    ],
    "types": {
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(XbetState)1178": {
        "encoding": "inplace",
        "label": "enum Xbet.XbetState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}